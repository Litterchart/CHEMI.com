/*!
 * TTS JavaScript Library
 * http://www.wdit.com.cn
 *
 * Copyright (c) 2015 - 2022 WDIT Ltd
 *
 * Author: WDIT
 * Version: 2.0.0
 */
(function () {
    "use strike";

    var msc_gender = 4;
    var regurlnumber = (/(\d)\.htm/i).exec(location.href);
    if (regurlnumber && (regurlnumber[1] % 2) == 0) {
        msc_gender = 0;
    }
    if (window.addEventListener) {
        window.addEventListener("load", msc_core, false);
    } else if (window.attachEvent) {
        window.attachEvent("onload", msc_core);
    }

    function isIE9Less() {
        return navigator.appName == "Microsoft Internet Explorer" && parseInt(navigator.appVersion.split(";")[1].replace(/[ ]/g, "").replace("MSIE", "")) < 10;
    }

    var createAjax = function () {
        var xhr = null;

        if (window.XMLHttpRequest) {
            xhr = new XMLHttpRequest();
        } else {
            xhr = new ActiveXObject("Microsoft.XMLHTTP");
        }
        return xhr;
    };


    var ajax = function (conf) {
        // 初始化
        //type参数,可选
        var type = conf.type ? conf.type.toLocaleLowerCase() : 'get';
        //url参数，必填
        var url = conf.url;
        //data参数可选，只有在post请求时需要
        var data = conf.data;
        //datatype参数可选
        var dataType = conf.dataType;
        var contentType = conf.contentType;
        //回调函数可选
        var success = conf.success;
        var error = conf.error;
        var isTimeout = false;
        var timer = setTimeout(function () {
            isTimeout = true;
            xhr.abort();
        }, conf.timeout || 15000);
        if (type == null) {
            //type参数可选，默认为get
            type = "get";
        }
        if (dataType == null) {
            //dataType参数可选，默认为text
            dataType = "text";
        }
        // 创建ajax引擎对象
        var xhr = createAjax();
        // 打开
        xhr.open(type, url, true);
        // 发送
        if (type == "get") {
            xhr.send(null);
        } else if (type == "post") {
            xhr.setRequestHeader("content-type",
                contentType ? contentType : "application/x-www-form-urlencoded");
            xhr.send(data);
        }
        xhr.onreadystatechange = function () {
            if (xhr.readyState == 4) {
                if (isTimeout) {
                    conf.error && conf.error();
                    return;
                }
                clearTimeout(timer);
                if (xhr.status == 200) {
                    if (dataType == "text" || dataType == "TEXT") {
                        //普通文本
                        success && success(xhr.responseText);
                    } else if (dataType == "xml" || dataType == "XML") {
                        //接收xml文档
                        success && success(xhr.responseXML);
                    } else if (dataType == "json" || dataType == "JSON") {
                        success && success(eval("(" + xhr.responseText + ")"));
                    }
                } else {
                    error && error();
                }

            }
        };

    };

    var hexcase = 0;
    var b64pad = "";

    function hex_md5(s) {
        return rstr2hex(rstr_md5(str2rstr_utf8(s)));
    }

    function b64_md5(s) {
        return rstr2b64(rstr_md5(str2rstr_utf8(s)));
    }

    function any_md5(s, e) {
        return rstr2any(rstr_md5(str2rstr_utf8(s)), e);
    }

    function hex_hmac_md5(k, d) {
        return rstr2hex(rstr_hmac_md5(str2rstr_utf8(k), str2rstr_utf8(d)));
    }

    function b64_hmac_md5(k, d) {
        return rstr2b64(rstr_hmac_md5(str2rstr_utf8(k), str2rstr_utf8(d)));
    }

    function any_hmac_md5(k, d, e) {
        return rstr2any(rstr_hmac_md5(str2rstr_utf8(k), str2rstr_utf8(d)), e);
    }

    function md5_vm_test() {
        return hex_md5("abc").toLowerCase() == "900150983cd24fb0d6963f7d28e17f72";
    }

    function rstr_md5(s) {
        return binl2rstr(binl_md5(rstr2binl(s), s.length * 8));
    }

    function rstr_hmac_md5(key, data) {
        var bkey = rstr2binl(key);
        if (bkey.length > 16) {
            bkey = binl_md5(bkey, key.length * 8);
        }
        var ipad = Array(16), opad = Array(16);
        for (var i = 0; i < 16; i++) {
            ipad[i] = bkey[i] ^ 909522486;
            opad[i] = bkey[i] ^ 1549556828;
        }
        var hash = binl_md5(ipad.concat(rstr2binl(data)), 512 + data.length * 8);
        return binl2rstr(binl_md5(opad.concat(hash), 512 + 128));
    }

    function rstr2hex(input) {
        try {
            hexcase;
        } catch (e) {
            hexcase = 0;
        }
        var hex_tab = hexcase ? "0123456789ABCDEF" : "0123456789abcdef";
        var output = "";
        var x;
        for (var i = 0; i < input.length; i++) {
            x = input.charCodeAt(i);
            output += hex_tab.charAt((x >>> 4) & 15) + hex_tab.charAt(x & 15);
        }
        return output;
    }

    function rstr2b64(input) {
        try {
            b64pad;
        } catch (e) {
            b64pad = "";
        }
        var tab = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
        var output = "";
        var len = input.length;
        for (var i = 0; i < len; i += 3) {
            var triplet = (input.charCodeAt(i) << 16) | (i + 1 < len ? input.charCodeAt(i + 1) << 8 : 0) | (i + 2 < len ? input.charCodeAt(i + 2) : 0);
            for (var j = 0; j < 4; j++) {
                if (i * 8 + j * 6 > input.length * 8) {
                    output += b64pad;
                } else {
                    output += tab.charAt((triplet >>> 6 * (3 - j)) & 63);
                }
            }
        }
        return output;
    }

    function rstr2any(input, encoding) {
        var divisor = encoding.length;
        var i, j, q, x, quotient;
        var dividend = Array(Math.ceil(input.length / 2));
        for (i = 0; i < dividend.length; i++) {
            dividend[i] = (input.charCodeAt(i * 2) << 8) | input.charCodeAt(i * 2 + 1);
        }
        var full_length = Math.ceil(input.length * 8 / (Math.log(encoding.length) / Math.log(2)));
        var remainders = Array(full_length);
        for (j = 0; j < full_length; j++) {
            quotient = Array();
            x = 0;
            for (i = 0; i < dividend.length; i++) {
                x = (x << 16) + dividend[i];
                q = Math.floor(x / divisor);
                x -= q * divisor;
                if (quotient.length > 0 || q > 0) {
                    quotient[quotient.length] = q;
                }
            }
            remainders[j] = x;
            dividend = quotient;
        }
        var output = "";
        for (i = remainders.length - 1; i >= 0; i--) {
            output += encoding.charAt(remainders[i]);
        }
        return output;
    }

    function str2rstr_utf8(input) {
        var output = "";
        var i = -1;
        var x, y;
        while (++i < input.length) {
            x = input.charCodeAt(i);
            y = i + 1 < input.length ? input.charCodeAt(i + 1) : 0;
            if (55296 <= x && x <= 56319 && 56320 <= y && y <= 57343) {
                x = 65536 + ((x & 1023) << 10) + (y & 1023);
                i++;
            }
            if (x <= 127) {
                output += String.fromCharCode(x);
            } else {
                if (x <= 2047) {
                    output += String.fromCharCode(192 | ((x >>> 6) & 31), 128 | (x & 63));
                } else {
                    if (x <= 65535) {
                        output += String.fromCharCode(224 | ((x >>> 12) & 15), 128 | ((x >>> 6) & 63), 128 | (x & 63));
                    } else {
                        if (x <= 2097151) {
                            output += String.fromCharCode(240 | ((x >>> 18) & 7), 128 | ((x >>> 12) & 63), 128 | ((x >>> 6) & 63), 128 | (x & 63));
                        }
                    }
                }
            }
        }
        return output;
    }

    function str2rstr_utf16le(input) {
        var output = "";
        for (var i = 0; i < input.length; i++) {
            output += String.fromCharCode(input.charCodeAt(i) & 255, (input.charCodeAt(i) >>> 8) & 255);
        }
        return output;
    }

    function str2rstr_utf16be(input) {
        var output = "";
        for (var i = 0; i < input.length; i++) {
            output += String.fromCharCode((input.charCodeAt(i) >>> 8) & 255, input.charCodeAt(i) & 255);
        }
        return output;
    }

    function rstr2binl(input) {
        var output = Array(input.length >> 2);
        for (var i = 0; i < output.length; i++) {
            output[i] = 0;
        }
        for (var i = 0; i < input.length * 8; i += 8) {
            output[i >> 5] |= (input.charCodeAt(i / 8) & 255) << (i % 32);
        }
        return output;
    }

    function binl2rstr(input) {
        var output = "";
        for (var i = 0; i < input.length * 32; i += 8) {
            output += String.fromCharCode((input[i >> 5] >>> (i % 32)) & 255);
        }
        return output;
    }

    function binl_md5(x, len) {
        x[len >> 5] |= 128 << ((len) % 32);
        x[(((len + 64) >>> 9) << 4) + 14] = len;
        var a = 1732584193;
        var b = -271733879;
        var c = -1732584194;
        var d = 271733878;
        for (var i = 0; i < x.length; i += 16) {
            var olda = a;
            var oldb = b;
            var oldc = c;
            var oldd = d;
            a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);
            d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);
            c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);
            b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);
            a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);
            d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);
            c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);
            b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);
            a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);
            d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);
            c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);
            b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);
            a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);
            d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);
            c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);
            b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);
            a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);
            d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);
            c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);
            b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);
            a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);
            d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);
            c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);
            b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);
            a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);
            d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);
            c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);
            b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);
            a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);
            d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);
            c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);
            b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);
            a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);
            d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);
            c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);
            b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);
            a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);
            d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);
            c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);
            b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);
            a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);
            d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);
            c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);
            b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);
            a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);
            d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);
            c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);
            b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);
            a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);
            d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);
            c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);
            b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);
            a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);
            d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);
            c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);
            b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);
            a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);
            d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);
            c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);
            b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);
            a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);
            d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);
            c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);
            b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);
            a = safe_add(a, olda);
            b = safe_add(b, oldb);
            c = safe_add(c, oldc);
            d = safe_add(d, oldd);
        }
        return Array(a, b, c, d);
    }

    function md5_cmn(q, a, b, x, s, t) {
        return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);
    }

    function md5_ff(a, b, c, d, x, s, t) {
        return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
    }

    function md5_gg(a, b, c, d, x, s, t) {
        return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
    }

    function md5_hh(a, b, c, d, x, s, t) {
        return md5_cmn(b ^ c ^ d, a, b, x, s, t);
    }

    function md5_ii(a, b, c, d, x, s, t) {
        return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
    }

    function safe_add(x, y) {
        var lsw = (x & 65535) + (y & 65535);
        var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
        return (msw << 16) | (lsw & 65535);
    }

    function bit_rol(num, cnt) {
        return (num << cnt) | (num >>> (32 - cnt));
    }

    function toUnicode(data) {
        if (data == '') return "";
        var str = '';
        for (var i = 0; i < data.length; i++) {
            str += "\\u" + parseInt(data[i].charCodeAt(0), 10).toString(16);
        }
        return str;
    }

    function rawText(innerHtml, skipSpace) {
        if (!innerHtml) {
            return null;
        }
        let raw = innerHtml.replace(/<script[^>]*>(.|\n)*?<\/script>/ig, "")
            .replace(/<style[^>]*>(.|\n)*?<\/style>/ig, "")
            .replace(/<!--.*?-->/ig, "")
            .replace(/&nbsp;/ig, "")
            .replace(/<td[^>]*>/ig, "，")
            .replace(/<p[^>]*>/ig, "，")
            .replace(/<[^>]*>/ig, "")
            // .replace(/[()（）]*/ig, "")
            .replace(/[\r\n]/g, "");
        if (!skipSpace) {
            return raw.replace(/(\s*)/g, "");
        }

        return raw;
    }

    /**
     * 文章片段拆分
     * 1. 按中文句号
     * 2. 分割大小为1800字符
     * 3. 从后往前查找最近的句号出现的索引，即为一个片段
     */
    function fragments(content) {
        let fragment_size = 1500;
        if (content.length <= fragment_size) {
            return [content];
        }
        let fragment_flag = ['。', '！', '？', '：', '，', '、', '.', ',', '》'];
        let txts = [];
        let startIndex = 0;
        while (true) {
            let endIndex = -1;
            for (let i = 0; i < fragment_flag.length; i++) {
                let flag = fragment_flag[i];
                let idx = content.slice(startIndex, startIndex + fragment_size).lastIndexOf(flag);
                if (idx > 0) {
                    endIndex = idx;
                    break;
                }
            }

            if (endIndex == -1) {
                break;
            }
            endIndex += startIndex;
            let fragment = content.slice(startIndex, endIndex);
            if (fragment.length == 0) {
                break;
            }
            txts.push(fragment);
            startIndex = endIndex;
        }

        return txts;
    }

    var CURRENT_DOMAIN = document.domain;
    let protocol = document.location.protocol;

    var VOICE_BASE_URL = protocol + "//voice.shanghai.gov.cn/tts/";
    var SERVICE_BASE_URL = protocol + "//voice.shanghai.gov.cn/gateway/tts";
    var DEFAULT_PLAYER_URL = protocol + "//voice.ewdcloud.com/v2/tts.html";

    //样式大小
    function msc_core() {
        try {
            if (!document.getElementById("ivs_title")) {
                return;
            }
            var iframeElement = "";
            var frmbody = '';

            if (CURRENT_DOMAIN.indexOf("shmedia.tech") > -1 || CURRENT_DOMAIN.indexOf("gdmedia.tech") > -1) {
                iframeElement = '<iframe id="f1" name="f1" frameborder="0" style="position: absolute;width: 190px;display: block;right: 0;top: -20px; height: 28px;" marginwidth="0" scrolling="no" height="20px" width="100%" src=""></iframe>';
                if (document.getElementById("ivs_player") == undefined || document.getElementById("ivs_player") == null) {
                    var temp = document.getElementById("ivs_title").innerHTML;
                    document.getElementById("ivs_title").innerHTML = temp + "<br/>" + iframeElement;
                } else {
                    document.getElementById("ivs_player").innerHTML = document.getElementById("ivs_player").innerHTML + iframeElement;
                }

                frmbody = frmbody + '<body style="padding:0 auto auto 0;margin:0 auto auto 0;"><form id="mscform" action="" method="post" accept-charset="utf-8">';
                frmbody = frmbody + '<input id="url" type="text" style="display:none" name="url"/>';
                frmbody = frmbody + '<input id="audioFilename" type="text" style="display:none" name="audioFilename"/>';
                frmbody = frmbody + '<input id="title" type="text" style="display:none" name="title"/>';
                frmbody = frmbody + '<input id="rong" type="text" style="display:none" name="rong" value="1"/>';
                frmbody = frmbody + '<input id="content" type="text" style="display:none" name="content"/>';
                frmbody = frmbody + '<input id="publishTime" type="text" style="display:none" name="publishTime"/>';
                frmbody = frmbody + '</form></body>';
            } else {
                iframeElement = '<iframe id="f1" name="f1" frameborder="0" style="padding:0 auto auto 0;" marginwidth="0" scrolling="no" height="80px" width="100%" src=""></iframe>';
                if (document.getElementById("ivs_player") == undefined || document.getElementById("ivs_player") == null) {
                    var temp = document.getElementById("ivs_title").innerHTML;
                    document.getElementById("ivs_title").innerHTML = temp + "<br/>" + iframeElement;
                } else {
                    document.getElementById("ivs_player").innerHTML = document.getElementById("ivs_player").innerHTML + iframeElement;
                }

                frmbody = frmbody + '<body style="padding:0 auto auto 0;margin:0 auto auto 0;"><form id="mscform" action="" method="post" accept-charset="utf-8">';
                frmbody = frmbody + '<input id="url" type="text" style="display:none" name="url"/>';
                frmbody = frmbody + '<input id="audioFilename" type="text" style="display:none" name="audioFilename"/>';
                frmbody = frmbody + '<input id="title" type="text" style="display:none" name="title"/>';
                frmbody = frmbody + '<input id="content" type="text" style="display:none" name="content"/>';
                frmbody = frmbody + '<input id="publishTime" type="text" style="display:none" name="publishTime"/>';
                frmbody = frmbody + '</form></body>';
            }

            var frm;

            frm = window.frames["f1"];
            frm.document.write(frmbody);

            let ivs_title = document.getElementById("ivs_title");
            var title = ivs_title.children.length > 0 ? rawText(text(ivs_title)) :
                rawText(document.getElementById("ivs_title").textContent);
            var ivs_date = document.getElementById("ivs_date") ? document.getElementById("ivs_date").innerHTML : '';
            var publishTime = rawText(ivs_date, true);
            var content = rawText(document.getElementById("ivs_content").innerHTML);
            var url = document.location.href;

            if (url.indexOf('www.shqp.gov.cn') > -1) {
                url = url.replace('https:', "http:");
            }
            url = url.replace(document.location.search, '');

            let txts = fragments(content);

            var filename = hex_md5(toUnicode(url + title + txts[0]));
            ajax({
                url: VOICE_BASE_URL + 'exists?rand=' + Math.random() + "&filename=" + filename,
                dataType: "json",
                method: "post",
                success: function (res) {
                    if (!res) {
                        return;
                    }
                    var frm = window.frames["f1"];
                    frm.document.getElementById("url").value = url;
                    if (res.data == -1) {
                        frm.document.getElementById("title").value = title;
                        frm.document.getElementById("publishTime").value = publishTime;
                        frm.document.getElementById("content").value = content;
                    } else {
                        if (txts.length > 1) {
                            for (let i = 1; i < txts.length; i++) {
                                filename = filename + "," + hex_md5(toUnicode(url + title + txts[i]));
                            }
                        }
                        frm.document.getElementById("audioFilename").value = filename;
                    }
                    frm.document.getElementById("mscform").action = SERVICE_BASE_URL + "/speak";
                    frm.document.getElementById("mscform").submit();
                },
                error: function () {
                    frm.document.location.href = DEFAULT_PLAYER_URL;
                }
            });
        } catch (e) {
            console.error(e);
        }
    }

    // ################################ 以下内容为指读语音代码 ###################################################
    /**
     * 无障碍阅读模式开关 barrier_free_reading_mode
     * off 关闭
     * point_reading 指读模式
     * continuous_reading 连读模式
     */
    var fragment_audio_list = [];
    var current_play_audio_idx = 0;
    var continuous_reading_start_flag = false;
    var tts_off = 'off';
    var point_reading_mode = 'point_reading';
    var continuous_reading_mode = 'continuous_reading';

    /**
     * 防抖函数
     * @param fn
     * @param delay
     * @returns {Function}
     */
    function debounce(fn, delay) {
        let handle;
        return function (e) {
            clearTimeout(handle);
            handle = setTimeout(function () {
                fn(e);
            }, delay ? delay : 300);
        }

    }

    function attr(dom, name, value) {
        if (value) {
            dom.setAttribute(name, value);
        } else {
            try {
                return dom.getAttribute(name);
            } catch (e) {
                console.error('dom: ', dom, ', e: ', e);
                return null;
            }
        }
    }

    function isHidden(dom) {
        let tagName = dom.tagName.toLocaleLowerCase();
        let excludes = ['option'];
        if (excludes.indexOf(tagName) > -1) {
            return false;
        }

        return dom.offsetParent === null;
    }

    function css(dom, style) {
        if (typeof style !== 'object') {
            return;
        }
        for (let p in style) {
            dom.style[p] = style[p];
        }
    }

    /**
     * 需要语音转换的标签
     * @type
     */
    let cvtTag = {
        'a': '链接', 'img': '图片',
        'h1': '标题', 'h2': '标题', 'h3': '标题', 'h4': '标题', 'h5': '标题', 'h6': '标题',
        'li': 'li', 'strong': 'strong', 'small': 'small', 'p': 'p', 'span': 'span', 'samp': 'samp',
        'label': 'label'
    };

    let skipTags = ["style", "script"];

    /**
     * 播放音频片段
     */
    function fragment_play() {
        if (++current_play_audio_idx <= fragment_audio_list.length - 1) {
            while (!fragment_audio_list[current_play_audio_idx]) {
                current_play_audio_idx++;
            }
            let voiceUrl = VOICE_BASE_URL + fragment_audio_list[current_play_audio_idx] + ".mp3";
            let player = document.getElementById('tts_audio_player');
            attr(player, 'src', voiceUrl);
            player.play();
        }
    }

    /**
     * 递归遍历元素
     * @param el
     */
    function loop(el, idx, filenames) {
        for (let i = 0; i < el.children.length; i++) {
            let child = el.children[i];
            if (isHidden(child)) {
                continue;
            }
            let tagName = child.tagName.toLocaleLowerCase();
            if (skipTags.indexOf(tagName) > -1) {
                continue;
            }
            attr(child, 'audio_idx', ++idx);
            if (child.children.length > 0) {
                // cvtAudio(child, tagName);
                let cvt = createFilename(el, tagName);
                if (cvt) {
                    if (fragment_audio_list.indexOf(cvt.filename) == -1) {
                        fragment_audio_list[idx] = cvt.filename;
                        filenames.push(cvt);
                    }
                }
                idx = loop(child, idx, filenames);
            } else {
                if (cvtTag[tagName]) {
                    // cvtAudio(child, tagName);
                    let cvt = createFilename(child, tagName);
                    if (cvt) {
                        if (fragment_audio_list.indexOf(cvt.filename) == -1) {
                            fragment_audio_list[idx] = cvt.filename;
                            filenames.push(cvt);
                        }
                    }
                }
            }
        }

        return idx;
    }

    /**
     * 获取dom节点的文本
     * @param dom
     */
    function text(dom) {
        let title = attr(dom, 'title');
        if (title && !/^\s$/.test(title)) {
            return title;
        }
        for (let i = 0; i < dom.childNodes.length; i++) {
            let child = dom.childNodes[i];
            if (child.nodeType == 3 && !/^[\n\s]+$/.test(child.nodeValue)) {
                return child.nodeValue;
            }
        }

        return null;
    }

    /**
     * 生成文件名称
     * @param dom
     * @param tagName
     * @returns {*}
     */
    function createFilename(dom, tagName) {
        if (!dom) {
            return null;
        }
        let isModule = attr(dom, 'class') ? attr(dom, 'class').indexOf('classSkip') > -1 : false;
        let txt;
        if (isModule) {
            txt = attr(dom, 'title');
        } else {
            txt = dom.children.length > 0 ? text(dom) : (dom.textContent || attr(dom, 'alt') || attr(dom, 'title'));
        }
        if (!txt) {
            return null;
        }
        txt = txt.replace(/\s/, ',');
        let dialect = document.getElementById('tts_dialect');
        let dialect_value = dialect ? dialect.options[dialect.selectedIndex].value : '';
        // 生成文件名称: md5(标签+文本)
        let cvtText = rawText(txt);
        if (cvtText.length == 0) {
            return null;
        }
        // 排除非中文、数据、字母的文本
        if (!/[\u4e00-\u9fa5\w]+/.test(cvtText)) {
            return null;
        }
        cvtText = (!cvtTag[tagName] || cvtTag[tagName] == tagName ? '' : cvtTag[tagName]) + cvtText;
        let filename = hex_md5(toUnicode(cvtText + dialect_value));
        if (isModule) {
            attr(dom, 'audio', VOICE_BASE_URL + filename + '.mp3');
        }
        return {
            filename: filename,
            cvtText: cvtText
        };
    }

    /**
     * 语音转换
     * @param dom
     * @param tagName
     * @param convertSuccess
     */
    function cvtAudio(dom, tagName, convertSuccess) {
        let cvt = createFilename(dom, tagName);
        if (!cvt) {
            return;
        }
        // 判断资源是否存在
        ajax({
            url: VOICE_BASE_URL + 'exists?rand=' + Math.random() + "&filename=" + cvt.filename,
            dataType: "json",
            method: "post",
            success: function (res) {
                if (!res) {
                    return;
                }
                if (res.data == -1) {
                    // 不存在，发送文本转换资源
                    ajax({
                        url: SERVICE_BASE_URL + '/im_cvt',
                        dataType: "json",
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify({
                            txt: cvt.cvtText
                        })
                    });
                } else {
                    convertSuccess && convertSuccess(cvt.filename);
                }
            }
        });
    }

    /**
     * 创建音频播放组件
     */
    function createAudio() {
        let audio = document.createElement('audio');
        audio.id = 'tts_audio_player';
        audio.autoplay = true;
        audio.loop = false;
        audio.addEventListener('ended', function () {
            if (fragment_audio_list.length > 0 && window.wdit_tts_current_reading_mode == continuous_reading_mode) {
                fragment_play();
            }
        });
        audio.addEventListener("error", function () {
            if (window.wdit_tts_current_reading_mode == continuous_reading_mode) {
                fragment_play();
            }
        });
        document.body.appendChild(audio);
        audio.play();

        return audio;
    }

    function pauseTtsAudioBar() {
        let ttsAudio = document.getElementById('tts_autio_id');
        if (ttsAudio && !ttsAudio.paused) {
            ttsAudio.pause();
        }
    }

    /**
     * 鼠标浮在dom元素上触发监听函数
     */
    document.onmouseover = debounce(function (e) {
        if (!continuous_reading_start_flag) {
            current_play_audio_idx = attr(e.target, 'audio_idx') ? attr(e.target, 'audio_idx') * 1 - 1 : 0;
        }
        let player = document.getElementById('tts_audio_player');
        if (player && window.wdit_tts_current_reading_mode == point_reading_mode) {
            let tagName = e.target.tagName.toLocaleLowerCase();
            if (cvtTag[tagName]) {
                cvtAudio(e.target, tagName, function (filename) {
                    // 请求语音文件
                    let voiceUrl = VOICE_BASE_URL + filename + ".mp3";
                    attr(player, 'src', voiceUrl);
                    setTimeout(function () {
                        // 暂停无障碍工具条语音播放
                        pauseTtsAudioBar();
                        player.play();
                    }, 50);
                    css(e.target, {'textDecoration': 'underline', 'cursor': 'pointer'});
                })
            }
        }
    });

    /**
     * 鼠标离开dom元素上触发监听函数
     */
    document.onmouseout = function (e) {
        let player = document.getElementById('tts_audio_player');
        if (player && window.wdit_tts_current_reading_mode == point_reading_mode) {
            let tagName = e.target.tagName.toLocaleLowerCase();
            if (cvtTag[tagName]) {
                // 去除css样式
                css(e.target, {'textDecoration': '', 'cursor': ''});
                player.pause();
            }
        }
    };

    // ****************** 以下为导出函数 ************************************************

    /**
     * 批量检查语音是否转换
     * @param filenames
     */
    function batchExists(filenames) {
        ajax({
            url: SERVICE_BASE_URL + '/batch_exists',
            dataType: "json",
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({
                filenames: filenames.map(function (a) {
                    return a.filename
                })
            }),
            success: function (res) {
                if (res) {
                    let cvtAudios = [];
                    res.forEach(function (a) {
                        let arys = filenames.filter(function (b) {
                            return b.filename == a
                        });
                        for (let i = 0; i < arys.length; i++) {
                            cvtAudios.push(arys[i]);
                        }
                    });
                    cvtAudios.forEach(function (a) {
                        // 不存在，发送文本转换资源
                        ajax({
                            url: SERVICE_BASE_URL + '/im_cvt',
                            dataType: "json",
                            type: 'POST',
                            contentType: 'application/json',
                            data: JSON.stringify({
                                txt: a.cvtText
                            })
                        });
                    })
                }
            }
        });
    };

    /**
     * 指读函数
     */
    window.wdit_tts_point_reading = function () {
        window.wdit_tts_current_reading_mode = point_reading_mode;
        let player = document.getElementById('tts_audio_player');
        if (!player) {
            player = createAudio();
        }
        player.pause();

        if (fragment_audio_list.length == 0) {
            let idx = 0;
            let filenames = [];
            loop(document.body, idx, filenames);
            batchExists(filenames);
        }
    };

    /**
     * 连读函数
     */
    window.wdit_tts_continuous_reading = function () {
        setTimeout(function () {
            // 暂停无障碍工具条语音播放
            pauseTtsAudioBar();
            window.wdit_tts_current_reading_mode = continuous_reading_mode;
            continuous_reading_start_flag = true;
            let player = document.getElementById('tts_audio_player');
            if (!player) {
                player = createAudio();
            }
            if (fragment_audio_list.length == 0) {
                let idx = 0;
                let filenames = [];
                loop(document.body, idx, filenames);
                batchExists(filenames);
            }
            player.pause();
            fragment_play();
        }, 1500);
    };

    /**
     * 关闭
     */
    window.wdit_tts_close = function () {
        window.wdit_tts_current_reading_mode = tts_off;
        let player = document.getElementById('tts_audio_player');
        if (player) {
            player.pause();
        }
    }
})();